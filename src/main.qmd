---
title: "ELS OE work order auto reporter"
author: "Brian Pile"
format:
  html:
    toc: true
editor: source
execute: 
  echo: false
embed-resources: true
editor_options: 
  chunk_output_type: inline
---

```{r}
#| label: setup
#| message: false

library(quarto)
suppressPackageStartupMessages(library(tidyverse))
library(gt)
library(here)
library(devparext)
library(loadr)
theme_set(theme_bw())
source(here("local_config.R"))
source(here("src/summary_analysis_funcs.R"))




# TOP PRIORITY
# TODO: problem in summary data. If_osa1 is sometimes 400 when it should always be 100???
# 25FC01511-4
# 25FC01516-1

# MISC
# TODO: create a render_quarto.R script to control the output html file location and name
# TODO: add timestamp?
# TODO: wavelength spacing pass/fail - this is tough to do!!!
# TODO: add pre burn-in yield and OE burn-in pick list, with Pareto
# TODO: add post burn-in yield and OE final goods pick list

# Notes:
# - post-bond (pre-burn) data screening is based on LIV test only, no spectral
# - post-burn data screening included LIV, OSA, and burn-in results

```

```{r}
#| label: helper-functions

plot_cdf = function(data, group_var, value_var) {
  data |>
    filter(is.na({{ value_var }}) == FALSE) |> 
    group_by(bi_status, {{ group_var }}) |>
    arrange({{ value_var }}) |>
    mutate(cdf = seq(1 / n(), 1, length.out = n())) |>
    ggplot(aes(x = {{ value_var }}, y = cdf, color = {{ group_var }})) +
    geom_line() +
    geom_point() +
    scale_y_continuous(breaks = seq(0, 1, 0.2), labels = scales::percent) +
    facet_wrap(~ bi_status) +
    ylab("Cumulative Probability")
}

```

```{r}
#| label: load-processed-data

source(here("src/load_combined_data.R"))

```


```{r}
#| label: data-summarization
#| message: false

df_summary_mpd = summarize_mpd_data(df_mpd_iv)
df_summary_liv = summarize_liv_data(df_liv)
df_summary_osa = summarize_osa_data(df_osa)
df_summary = join_the_summaries(df_summary_liv, df_summary_osa, df_summary_mpd)

```

```{r}
#| label: pf-judgement-specs

# apply spec limits
df_summary = df_summary |> 
  mutate(
    pf_Ith    = if_else(Ith1d <= 30,           TRUE, FALSE, NA),
    pf_Vf_lo  = if_else(Vf2 >= 1.2,            TRUE, FALSE, NA),
    pf_Vf_hi  = if_else(Vf2 <= 2.0,            TRUE, FALSE, NA),
    pf_Pf     = if_else(Pf2 >= 80,             TRUE, FALSE, NA),
    pf_KINK   = if_else(abs(KINK) <= 30,       TRUE, FALSE, NA),
    
    # pf_SMSR   = if_else(SMSR2 >= 35,           TRUE, FALSE, NA),
    
    pf_SMSR   = case_when(
      bi_status == "pre" ~ if_else(SMSR2 >= 35, TRUE, FALSE, NA),
      bi_status == "post" ~ if_else(SMSR2 >= 35, TRUE, FALSE, FALSE),
      .default = NULL
    ),
    
    
    pf_Idark  = if_else(abs(Idark) <= 10e-9 ,  TRUE, FALSE, NA),
    pf_Ifmpd  = if_else(abs(If_mpd) >=1e-3,    TRUE, FALSE, NA),
    pf_specs  = case_when(
      bi_status == "pre" ~ if_all(c(pf_Ith:pf_KINK, pf_Idark, pf_Ifmpd)),
      bi_status == "post" ~ if_all(pf_Ith:pf_SMSR),
      .default = NA
    )
  )



```

```{r}
#| label: pf-judgement-burn

df_summary = df_summary |> 
  mutate(
    .by = c(dut_id),
    dIth1d_pct = 100 * (Ith1d/first(Ith1d, order_by = bi_status) - 1),
    dPf2_pct = 100 * (Pf2/first(Pf2, order_by = bi_status) - 1)
  ) |> 
  mutate(
    pf_dIth1d = case_when(
      bi_status == "post" ~ if_else(abs(dIth1d_pct) <= 10, TRUE, FALSE, FALSE),
      .default = NA
    ),
    pf_dPf2 = case_when(
      bi_status == "post" ~ if_else(abs(dPf2_pct)   <= 10, TRUE, FALSE, FALSE),
      .default = NA
    ),
    pf_burn   = if_all(pf_dIth1d:pf_dPf2),
    pf_final = case_when(
      bi_status == "post" ~ pf_specs & pf_burn,
      .default = NA
    )
  )

```

```{r}
#| label: assign-pf-codes

df_summary = df_summary |> 
  mutate(
    result_code =
      case_when(
        bi_status == "pre" ~ case_when(
          pf_Vf_lo   == FALSE ~ "Vf_lo",
          pf_Vf_hi   == FALSE ~ "Vf_hi",
          pf_Pf   == FALSE ~ "Pf",
          pf_Ith   == FALSE ~ "Ith",
          # pf_SMSR3 == FALSE ~ "SMSR",
          # pf_Lp3   == FALSE ~ "Lp",
          pf_KINK  == FALSE ~ "kink",
          pf_Idark == FALSE ~ "Idark",
          pf_Ifmpd == FALSE ~ "Ifmpd",
          pf_specs == TRUE ~ "PASS SPEC",
          .default = "?"
        ),
        bi_status == "post" ~ case_when(
          pf_Vf_lo   == FALSE ~ "Vf_lo",
          pf_Vf_hi   == FALSE ~ "Vf_hi",
          pf_Pf   == FALSE ~ "Pf",
          pf_Ith   == FALSE ~ "Ith",
          pf_SMSR == FALSE ~ "SMSR",
          # pf_Lp3   == FALSE ~ "Lp",
          pf_KINK  == FALSE ~ "kink",
          # pf_Idark == FALSE ~ "Idark",
          # pf_Ifmpd == FALSE ~ "Ifmpd",
          # pf_specs == TRUE ~ "PASS SPEC",
          # pf_dIth1d == FALSE ~ "dIth",
          # pf_dPf2 == FALSE ~ "dPf",
          pf_burn == FALSE ~ "burn",
          pf_final == TRUE ~ "PASS FINAL",
          .default = "?"
        )
      )
  )

```



```{r}
#| label: pf-judgement-oe

# # TODO: somehow add a column saying if that OE passed as a whole
# df_summary = df_summary |> 
#   group_by(fc_id)

```

```{r}
#| label: yield-calculation

df_yield_channel = df_summary |> 
  summarize(
    .by = bi_status,
    n_total = n(),
    across(
      .cols = starts_with("pf_"),
      .fns = list(
        fails = \(x) sum(!x, na.rm = TRUE),
        passes = \(x) sum(x, na.rm = TRUE),
        yield = \(x) sum(x, na.rm = TRUE)/n()
      )
    )
  ) |> 
  pivot_longer(
    cols = -c(bi_status, n_total),
    names_to = c("parameter", ".value"),
    names_pattern = "pf_(.+)_(.*)"
  )

df_yield_oe =   df_summary |> 
    summarize(
      .by = c(bi_status, fc_id),
      pf_oe_spec = all(pf_specs),
      pf_oe_burn = all(pf_burn)
    ) |> 
    mutate(
      pf_oe_final = if_else(bi_status == "post", pf_oe_spec & pf_oe_burn, NA)
    )
    
```

```{r}
#| label: output-summary-data

df_summary |> 
  mutate(across(where(is.numeric), \(x) round(x, 3))) |> 
  data.table::fwrite(file = here("data/output", str_glue("{work_order} summary data.csv")))

message("Created output summary data csv file!!!")

```

```{r}
#| label: summary-stats

# TODO: add spectral data, but it needs to come from post burn-in testing. no pre burn-in data taken

df_stats_liv = df_summary |> 
  filter(bi_status == "pre") |> 
  select(Ith1d, Pf2, Vf2, KINK) |> 
  mutate(
    KINK = abs(KINK),
    # KINK = if_else(KINK>10000, 10000, KINK)
  ) |>
  pivot_longer(
    cols = everything()
  ) |> 
  summarize(
    .by = name,
    `NA` = sum(is.na(value), na.rm = TRUE),
    outliers = sum(!isnt_outlier_tukey(value, na.rm = TRUE), na.rm = TRUE),
    mean = mean(value, na.rm = TRUE),
    sd = sd(value, na.rm = TRUE),
    quant = as_tibble_row(quantile(value, na.rm = TRUE))
  ) |> 
  unpack(quant) |> 
  rename_with(\(x) paste0("p", str_remove(x, "%")), contains("%"))

```

# Summary

## yield

```{r}
#| label: ld-level-yield-table

df_yield_channel |> 
  drop_na() |> 
  filter(
    parameter %in% c("specs", "burn", "final"),
    fails + passes == n_total
  ) |> 
  mutate(yield = round(100*yield)) |> 
  rename(
    `burn-in status` = bi_status,
    ss = n_total,
    `test-level` = parameter,
    `fail count` = fails,
    `pass count` = passes,
    `yield (%)` = yield
  ) |> 
  gt() |> 
  tab_header(title = str_glue("{work_order} LD-level Yield"))

```




```{r}
#| label: OE-level-yield-table

df_yield_oe |> 
  summarize(
    .by = bi_status,
    n_total = n(),
    across(
      .cols = starts_with("pf_"),
      .fns = list(
        fails = \(x) sum(!x),
        passes = \(x) sum(x),
        yield = \(x) sum(x)/n()
      )
    )
  ) |> 
  pivot_longer(
    cols = -c(bi_status, n_total),
    names_to = c("test-level", ".value"),
    names_pattern = "pf_oe_(.+)_(.+)"
  ) |> 
  mutate(yield = round(100*yield)) |> 
  rename(
    `burn-in status` = bi_status,
    ss = n_total,
    `fail count` = fails,
    `pass count` = passes,
    `yield (%)` = yield
  ) |> 
  drop_na() |> 
  gt() |> 
  tab_header(
    title = str_glue("{work_order} OE-level Yield")
  )


```



## summary stats

```{r}
#| label: table-stats

df_stats_liv |> 
  gt(rowname_col = "name") |> 
  tab_header(
    title = "Summary Statistics",
    subtitle = paste0("N = ", df_liv$dut_id |> unique() |> length(), " devices", ", Ths=50C")
  ) |> 
  tab_stubhead(label = "Parameter") |> 
  fmt_number(
    decimals = 0
  ) |> 
  text_replace(
    pattern = "Ith1d", replacement = "Threshold Current (mA)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "Pf2", replacement = "Output Power (mW), 400mA", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "Vf2", replacement = "Forward Voltage, (V), 400mA", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "SMSR3", replacement = "Side Mode Suppression Ratio (dB), 400mA", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "Lp3_cal", replacement = "Peak Wavelength (nm)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "KINK", replacement = "Kink Deviation (%)", locations = cells_stub()
  ) |> 
  fmt_number(
    rows = everything(),
    columns = everything(),
    sep_mark = "",
    decimals = 0
  ) |> 
  fmt_number(
    rows = 3,
    columns = -c(1:3),
    sep_mark = ""
  )

```

## parametric results

```{r}
#| label: pre-burn-parametric-results

facts = c("Vf_lo", "Vf_hi", "Ith", "Pf", "KINK", "SMSR", "Idark", "Ifmpd", "specs",
          "dIth1d", "dPf2")

df_summary |> 
  filter(bi_status == "pre") |> 
  select(fc_id, ch, dut_id, starts_with("pf_")) |> 
  pivot_longer(
    cols = starts_with("pf_"),
    names_prefix = "pf_"
  ) |> 
  mutate(name = fct_relevel(name, facts)) |> 
  ggplot(aes(x = ch, y = fc_id, fill = value)) +
  geom_tile(color = "black", show.legend = FALSE) +
  scale_y_discrete(limits = rev) +
  scale_fill_manual(values = c("TRUE" = "green", "FALSE" = "red")) +
  facet_wrap(~ name, nrow = 1) +
  labs(
    title = str_glue("{work_order} pre burn-in parametric results")
  ) +
  theme(
    axis.title = element_blank(),
    axis.text = element_text(size = 8),
    axis.text.x = element_text(angle = 0)
  )

```

```{r}
#| label: post-burn-parametric-results
# fig-width: 8
# fig-height: 8

facts = c("Vf_lo", "Vf_hi", "Ith", "Pf", "KINK", "SMSR", "Idark", "Ifmpd", "specs",
          "dIth1d", "dPf2", "burn", "final")

df_summary |> 
  filter(bi_status == "post") |> 
  select(fc_id, ch, dut_id, starts_with("pf_")) |> 
  pivot_longer(
    cols = starts_with("pf_"),
    names_prefix = "pf_"
  ) |> 
  mutate(name = fct_relevel(name, facts)) |> 
  ggplot(aes(x = ch, y = fc_id, fill = value)) +
  geom_tile(color = "black", show.legend = FALSE) +
  scale_y_discrete(limits = rev) +
  scale_fill_manual(values = c("TRUE" = "green", "FALSE" = "red")) +
  facet_wrap(~ name, nrow = 1) +
  labs(
    title = str_glue("{work_order} post burn-in parametric results")
  ) +
  theme(
    axis.title = element_blank(),
    axis.text = element_text(size = 8),
    axis.text.x = element_text(angle = 0)
  )

```

## pass rates

```{r}
#| label: pass-rate-col-plots

for (status in c("pre", "post")) { 
  
  # pass rates bar chart
  p = df_yield_channel |> 
    filter(
      bi_status == status,
      is.na(yield) == FALSE
    ) |> 
    mutate(parameter = fct_reorder(parameter, yield, .desc = TRUE)) |> 
    ggplot(aes(x = parameter, y = yield)) +
    geom_col() +
    geom_text(
      aes(label = paste0(round(100*yield, 0), "%")),
      vjust = -0.5
    ) +
    coord_cartesian(ylim = c(NA, 1.05)) +
    scale_y_continuous(breaks = seq(0, 1, 0.2), labels = scales::percent) +
    # facet_wrap(~ bi_status, scales = "free_x") +
    labs(
      title = str_glue("{work_order} {status} burn-in criteria pass rates"),
      x = "Parameter",
      y = NULL
    )
  print(p)
}

```

## failure Pareto

```{r}
#| label: failure-pareto

# # failure Pareto
# df_summary |> 
#   filter(bi_status == "pre") |> 
#   summarize(
#     .by = c(bi_status, result_code),
#     n = n()
#   ) |> 
#   mutate(
#     .by = c(bi_status),
#     rate = n/sum(n)
#   ) |> 
#   arrange(bi_status) |> 
#   mutate(
#     result_code = fct_reorder(result_code, rate, .desc = TRUE),
#     bar_color = if_else(result_code == "PASS SPEC", "green", "red")
#   ) |> 
#   ggplot(aes(x = result_code, y = rate, fill = bar_color)) +
#   geom_col(color = "black") +
#   geom_text(
#     aes(label = paste0(round(100*rate, 0), "%")),
#     vjust = -0.5
#   ) +
#   coord_cartesian(ylim = c(NA, 1.05)) +
#   scale_fill_identity() +
#   scale_x_discrete(drop = FALSE) +
#   scale_y_continuous(breaks = seq(0, 1, 0.2), labels = scales::percent) +
#   labs(
#     title = "Pre burn-in Pareto of first-failed criteria",
#     x = "Parameter",
#     y = NULL,
#     caption = "Note: result depends on the order in which the parameters are checked"
#   ) +
#   theme(
#     plot.caption = element_text(hjust = 0)
#   )

for (status in c("pre", "post")) {
  
  p = df_summary |> 
    filter(bi_status == status) |> 
    summarize(
      .by = c(bi_status, result_code),
      n = n()
    ) |> 
    mutate(
      .by = c(bi_status),
      rate = n/sum(n)
    ) |> 
    arrange(bi_status) |> 
    mutate(
      result_code = fct_reorder(result_code, rate, .desc = TRUE),
      bar_color = if_else(result_code %in% c("PASS SPEC", "PASS FINAL"), "green", "red")
    ) |> 
    ggplot(aes(x = result_code, y = rate, fill = bar_color)) +
    geom_col(color = "black") +
    geom_text(
      aes(label = paste0(round(100*rate, 0), "%")),
      vjust = -0.5
    ) +
    coord_cartesian(ylim = c(NA, 1.05)) +
    scale_fill_identity() +
    scale_x_discrete(drop = FALSE) +
    scale_y_continuous(breaks = seq(0, 1, 0.2), labels = scales::percent) +
    labs(
      title = str_glue("{work_order} {status} burn-in Pareto of first-failed criteria"),
      x = "Parameter",
      y = NULL,
      caption = "Note: result depends on the order in which the parameters are checked"
    ) +
    theme(
      plot.caption = element_text(hjust = 0)
    )
  print(p)
}

```



## burn-in pick list



# Characteristic Plots

## Sweep Data

:::{.panel-tabset}

### LI curves

```{r}
#| label: li-curves
#| fig-width: 8
#| fig-height: 8

df_liv |> 
  # filter(bi_status == "pre") |> 
  ggplot(aes(x = current/1e-3, y = power/1e-3, color = ch)) +
  annotate(geom = "rect", xmin = 400, xmax = 5000, ymin = -100, ymax = 80,
           fill = "gray90", color = "gray40", alpha = 0.5) +
  geom_path() +
  # geom_hline(yintercept = 80, color = "gray") +
  # geom_vline(xintercept = 400) +
  coord_cartesian(xlim = c(0, 500), ylim = c(0, 120)) +
  scale_y_continuous(breaks = seq(0, 200, 20)) +
  facet_wrap(fc_id ~ bi_status) +
  labs(
    title = str_glue("{work_order} LI curves, 50C"),
    x = "Current (mA)",
    y = "Power (mW)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1)),
    axis.text.x = element_text(angle = -90)
  )

```

### VI curves

```{r}
#| label: vi-curves
#| fig-width: 8
#| fig-height: 8

df_liv |> 
  # filter(bi_status == "pre") |> 
  ggplot(aes(x = current/1e-3, y = voltage, color = ch)) +
  geom_path() +
  coord_cartesian(ylim = c(0, 2)) +
  scale_y_continuous(breaks = seq(0, 3, 0.4)) +
  facet_wrap(fc_id ~ bi_status) +
  labs(
    title = str_glue("{work_order} VI curves, 50C"),
    x = "Current (mA)",
    y = "Voltage (V)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1)),
    axis.text.x = element_text(angle = -90)
  )

```

### MPD IV curves

```{r}
#| label: mpd-iv-curves
#| fig-width: 8
#| fig-height: 8

df_mpd_iv |> 
  ggplot(aes(x = voltage, y = log10(abs(current)), color = ch)) +
  geom_line() +
  coord_cartesian(ylim = c(-12, -2)) +
  scale_y_continuous(breaks = seq(-12, 0, 3)) +
  facet_wrap(fc_id ~ bi_status) +
  labs(
    title = str_glue("{work_order} MPD IV curves, 50C"),
    x = "Voltage (V)",
    y = "Log10 Current (A)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1))
  )

```

### Spectra

```{r}
#| label: spectra
#| fig-width: 8
#| fig-height: 8

df_osa |> 
  filter(If == 400e-3,
         wavelength |> between(1565, 1585)) |> 
  ggplot(aes(x = wavelength, y = power, color = ch)) +
  geom_path() +
  coord_cartesian(ylim = c(-80, 20)) +
  facet_wrap(fc_id ~ bi_status) +
  labs(
    title = str_glue("{work_order} Spectra, 400mA, 50C"),
    x = "Wavelength (nm)",
    y = "Power (dBm)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1))
  )

```

### Peak WL

```{r}
#| label: peak-wl
#| fig-width: 8
#| fig-height: 8

df_summary_osa |> 
  ggplot(aes(x = If/1e-3, y = Lp, color = ch)) +
  geom_line() +
  geom_point() +
  facet_wrap(fc_id ~ bi_status) +
  labs(
    title = str_glue("{work_order} Peak WL, 50C"),
    x = "Current (mA)",
    y = "Lp (nm)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1)),
    axis.text.x = element_text(angle = -90)
  )

```

### SMSR

```{r}
#| label: smsr
#| fig-width: 8
#| fig-height: 8

df_summary_osa |> 
  ggplot(aes(x = If/1e-3, y = SMSR, color = ch)) +
  geom_line() +
  geom_point() +
  geom_hline(yintercept = 35) +
  coord_cartesian(ylim = c(0, 70)) +
  scale_y_continuous(breaks = seq(0, 100, 10)) +
  facet_wrap(fc_id ~ bi_status) +
  labs(
    title = str_glue("{work_order} SMSR, 50C"),
    x = "Current (mA)",
    y = "SMSR (dB)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1)),
    axis.text.x = element_text(angle = -90)
  )

```

### LI curves failures

```{r}
#| label: li-curves-burn-failures
#| fig-width: 8
#| fig-height: 8

df_liv |> 
  filter(
    dut_id %in% (
      df_summary |> 
        filter(
          pf_burn == FALSE
        ) |> 
        pull(dut_id)
    )
  ) |> 
  ggplot(aes(x = current/1e-3, y = power/1e-3, color = bi_status)) +
    annotate(geom = "rect", xmin = 400, xmax = 5000, ymin = -100, ymax = 80,
           fill = "gray90", color = "gray", alpha = 0.5) +
  geom_path() +
  coord_cartesian(xlim = c(0, 500), ylim = c(0, 120)) +
  scale_y_continuous(breaks = seq(0, 200, 20)) +
  facet_wrap(~ dut_id) +
  labs(
    title = str_glue("{work_order} burn-in failures LI curves, 50C"),
    x = "Current (mA)",
    y = "Power (mW)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1), size = 8),
    axis.text.x = element_text(angle = -90),
    axis.text = element_text(size = 6)
  )

```

### LI curves zoom failures

```{r}
#| label: li-curves-burn-zoom-failures
#| fig-width: 8
#| fig-height: 8

df_liv |> 
  filter(
    dut_id %in% (
      df_summary |> 
        filter(
          pf_burn == FALSE
        ) |> 
        pull(dut_id)
    )
  ) |> 
  ggplot(aes(x = current/1e-3, y = power/1e-3, color = bi_status)) +
  geom_path() +
  coord_cartesian(xlim = c(8, 30), ylim = c(0, 6)) +
  # scale_y_continuous(breaks = seq(0, 200, 20)) +
  facet_wrap(~ dut_id) +
  labs(
    title = str_glue("{work_order} burn-in failures LI curves zoom, 50C"),
    x = "Current (mA)",
    y = "Power (mW)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1), size = 8),
    axis.text.x = element_text(angle = -90),
    axis.text = element_text(size = 6)
  )

```

### VI curves failures

```{r}
#| label: vi-curves-burn
#| fig-width: 8
#| fig-height: 8

df_liv |> 
  filter(
    dut_id %in% (
      df_summary |> 
        filter(
          pf_burn == FALSE
        ) |> 
        pull(dut_id)
    )
  ) |> 
  ggplot(aes(x = current/1e-3, y = voltage, color = bi_status)) +
  geom_path() +
  coord_cartesian(ylim = c(0, 4)) +
  # scale_y_continuous(breaks = seq(0, 10, 0.5)) +
  facet_wrap(~ dut_id) +
  labs(
    title = str_glue("{work_order} burn-in VI curves, 50C"),
    x = "Current (mA)",
    y = "Voltage (V)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1), size = 8),
    axis.text.x = element_text(angle = -90),
    axis.text = element_text(size = 6)
  )

```

:::

# Parametric Data

:::{.panel-tabset}

### Ith

```{r}
#| label: cdf-ith

df_summary_liv |> 
  # filter(bi_status == "pre") |> 
  plot_cdf(group_var = ch, value_var = Ith1d) +
  labs(
    title = str_glue("{work_order} Threshold Current CDF, 50C"),
    x = "Ith1d (mA)"
  ) +
  coord_cartesian(xlim = c(0, 30), ylim = c(0, 1))

```

### Pf400

```{r}
#| label: cdf-pf400

df_summary_liv |> 
  # filter(bi_status == "pre") |> 
  plot_cdf(group_var = ch, value_var = Pf2) +
  geom_vline(xintercept = 80) +
  scale_x_continuous(breaks = seq(0, 200, 20)) +
  labs(
    title = str_glue("{work_order} Output Power CDF, 400mA, 50C"),
    x = "Pf400 (mW)"
  )

```

### Vf400

```{r}
#| label: cdf-vf400

df_summary_liv |> 
  # filter(bi_status == "pre") |> 
  plot_cdf(group_var = ch, value_var = Vf2) +
  geom_vline(xintercept = 2.0) +
  scale_x_continuous(breaks = seq(0, 10, 0.4)) +
  labs(
    title = str_glue("{work_order} Foward Voltage CDF, 400mA, 50C"),
    x = "Vf400 (V)"
  )

```

### Kink

```{r}
#| label: cdf-kink

df_summary_liv |> 
  # filter(bi_status == "pre") |> 
  mutate(KINK = abs(KINK)) |> 
  plot_cdf(group_var = ch, value_var = KINK) +
  geom_vline(xintercept = c(30)) +
  coord_cartesian(xlim = c(0, 100)) +
  scale_x_continuous(breaks = seq(-1e3, 1e3, 20)) +
  labs(
    title = str_glue("{work_order} Kink Deviation CDF, 250-495mA, 50C"),
    x = "|Kink| (%)"
  )

```

### SMSR

```{r}
#| label: cdf-smsr

df_summary_osa |> 
  filter(If == 400e-3) |> 
  plot_cdf(group_var = ch, value_var = SMSR) +
  geom_vline(xintercept = c(35)) +
  coord_cartesian(xlim = c(0, 70)) +
  scale_x_continuous(breaks = seq(0, 100, 10)) +
  labs(
    title = str_glue("{work_order} SMSR CDF, 400mA, 50C"),
    x = "SMSR (dB)"
  )

```

### dIth CDF

```{r}
#| label: cdf-dIth

df_summary |> 
  filter(bi_status == "post") |> 
  plot_cdf(group_var = ch, value_var = dIth1d_pct) +
  geom_vline(xintercept = c(-10, 10)) +
  coord_cartesian(xlim = c(-40, 40)) +
  scale_x_continuous(breaks = seq(-100, 100, 20)) +
  labs(
    title = "Burn-in ΔIth CDF, 50C",
    x = "ΔIth (%)"
  )
  

```

### dPf CDF

```{r}
#| label: cdf-dPf

df_summary |> 
  filter(bi_status == "post") |> 
  plot_cdf(group_var = ch, value_var = dPf2_pct) +
  geom_vline(xintercept = c(-10, 10)) +
  scale_x_continuous(breaks = seq(-100, 100, 20)) +
  labs(
    title = "Burn-in ΔPf CDF, 400mA, 50C",
    x = "ΔPf (%)"
  )

```

:::


