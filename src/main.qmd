---
title: "ELS OE work order auto reporter"
author: "Brian Pile"
format:
  html:
    toc: true
editor: source
execute: 
  echo: false
embed-resources: true
editor_options: 
  chunk_output_type: inline
---

```{r}
#| label: setup
#| message: false

suppressPackageStartupMessages(library(tidyverse))
library(gt)
library(here)
library(devparext)
library(loadr)
theme_set(theme_bw())
source(here("local_config.R"))
source(here("src/local_data_wrangling.R"))

# TOP PRIORITY
# TODO: problem in summary data. If_osa1 is sometimes 400 when it should always be 100???
# 25FC01511-4
# 25FC01516-1

# MISC
# TODO: wavelength spacing pass/fail - this is tough to do!!!
# TODO: burn-in analysis: add CDFs for parameter changes
# TODO: add pre burn-in yield and OE burn-in pick list
# TODO: add post burn-in yield and OE final goods pick list
# TODO: add MPD Ipd curves
# TODO: add mpd Idark to df_summary AND pf_Idark to pf judgement

# Notes:
# - post-bond (pre-burn) data screening is based on LIV test only, no spectral
# - post-burn data screening included LIV, OSA, and burn-in results

```

```{r}
#| label: helper-functions

plot_cdf = function(data, group_var, value_var) {
  data |>
    group_by({{ group_var }}) |>
    arrange({{ group_var }}, {{ value_var }}) |>
    mutate(cdf = seq(1 / n(), 1, length.out = n())) |>
    ggplot(aes(x = {{ value_var }}, y = cdf, color = {{ group_var }})) +
    geom_line() +
    geom_point()
}

```


```{r}
#| label: load-processed-data

#### MPD IV ####
filename_iv = paste(work_order, "MPD IV combined data.csv")
if (!file.exists(here("data/processed", filename_iv))) {
  message("Wrangling MPD!!!")
  wrangle_mpd(filename = here("data/processed", filename_iv))
}

df_mpd_iv = data.table::fread(file = here("data/processed", filename_iv)) |> 
  as_tibble() |> 
  mutate(
    ch = as.character(ch),
    dut_id = paste(sep = "-", fc_id, ch),
    .after = ch
  )


#### LIV ####
filename_liv = paste(work_order, "LIV combined data.csv")
if (!file.exists(here("data/processed", filename_liv))) {
  message("Wrangling LIV!!!")
  wrangle_liv(filename = here("data/processed", filename_liv))
}

df_liv = data.table::fread(file = here("data/processed", filename_liv)) |> 
  as_tibble() |> 
  mutate(
    ch = as.character(ch),
    dut_id = paste(sep = "-", fc_id, ch),
    .after = ch
  ) |> 
  mutate(bi_status = fct_relevel(bi_status, "pre", "post"))

#### OSA ####
filename_osa = paste(work_order, "OSA combined data.csv")
if (!file.exists(here("data/processed", filename_osa))) {
  message("Wrangling OSA!!!")
  wrangle_osa(filename = here("data/processed", filename_osa))
}

df_osa = data.table::fread(file = here("data/processed", filename_osa)) |> 
  as_tibble() |> 
  mutate(
    dut_id = paste(sep = "-", fc_id, ch),
    ch = as.character(ch)
  ) |> 
  mutate(bi_status = fct_relevel(bi_status, "pre", "post"))

# cleanup some variables
rm(filename_iv, filename_liv, filename_osa)

```

```{r}
#| label: data-filtering

# If a measurement was run more than once, keep only the last one. The last one
# corresponds to the largest test_id increment.

# df_mpd_iv = df_mpd_iv |> 
#   group_by(dut_id) |> 
#   filter(test_id == max(test_id)) |> 
#   ungroup()

df_liv = df_liv |> 
  group_by(bi_status, dut_id) |> 
  filter(test_id == max(test_id)) |> 
  ungroup()

df_osa = df_osa |> 
  group_by(bi_status, dut_id, If) |> 
  filter(test_id == max(test_id)) |> 
  ungroup()

```

```{r}
#| label: data-summarization
#| message: false

#### MPD ####
df_summary_mpd = df_mpd_iv |> 
  group_by(across(!c(voltage, current))) |> 
  summarize(
    Idark = extract_i_from_iv(voltage, current, V0 = -2),
    If = extract_i_from_iv(voltage, current, V0 = 1),
    .groups = "drop"
  )


#### LIV ####
If_vec = c(100, 400)*1e-3
Ix_vec = c(50)*1e-3
Pop_vec = c(80)*1e-3
df_summary_liv = df_liv |> 
  group_by(across(!c(current, power, voltage, mpd_current))) |> 
  summarize_raw_liv_data(If_vec, Ix_vec, Pop_vec, Ik1 = 250, Ik2 = 495) |> 
  ungroup() |> 
  mutate(across(matches("^Pf\\d$"), \(x) 10*log10(abs(x)), .names = "{.col}_dBm"), .after = Pf2)


#### OSA ####
# TODO: add Ppk, BW20dB ?

df_summary_osa = df_osa |> 
  group_by(across(!c(wavelength, power))) |> 
  summarize(
    Lp = extract_peak_wav(wavelength, power),
    SMSR = extract_smsr(wavelength, power),
    .groups = "drop"
  )

df_summary_osa_wide = df_summary_osa |> 
  rename(If_osa = If) |> 
  filter(If_osa %in% c(100e-3, 400e-3)) |> 
  # group_by(dut_id, test_id) |> 
  group_by(dut_id) |> 
  mutate(If_index = seq_along(If_osa),
         If_osa = If_osa/1e-3) |> 
  ungroup() |> 
  pivot_wider(
    names_from = If_index,
    values_from = c(test_id, If_osa, Lp, SMSR),
    names_sep = ""
  ) |> 
  arrange(dut_id)

#### SUMMARY ####
df_summary = left_join(
  x = df_summary_liv,
  y = df_summary_osa_wide,
  by = join_by(work_order, bi_status, fc_id, ch, dut_id, temperature),
  suffix = c(".liv", ".osa")
) |> 
  arrange(dut_id, bi_status)

```

```{r}
#| label: pf-judgement-specs

df_summary = df_summary |> 
  mutate(
    pf_Ith    = if_else(Ith1d <= 30,       TRUE, FALSE, NA),
    pf_Vf_lo  = if_else(Vf2 >= 1.2,        TRUE, FALSE, NA),
    pf_Vf_hi  = if_else(Vf2 <= 2.0,        TRUE, FALSE, NA),
    pf_Pf     = if_else(Pf2 >= 80,         TRUE, FALSE, NA),
    pf_KINK   = if_else(abs(KINK) <= 30,   TRUE, FALSE, NA),
    pf_SMSR   = if_else(SMSR2 >= 35,       TRUE, FALSE, NA),
    pf_specs  = case_when(
      bi_status == "pre" ~ if_all(pf_Ith:pf_KINK),
      bi_status == "post" ~ if_all(pf_Ith:pf_SMSR),
      .default = NA
    )
  )

```

```{r}
#| label: pf-judgement-burn

# TODO: for pre burn in data, make all burn in pass/fail info NA

df_summary = df_summary |> 
  mutate(
    .by = c(dut_id),
    dIth1d_pct = 100 * (Ith1d/first(Ith1d, order_by = bi_status) - 1),
    dPf2_pct = 100 * (Pf2/first(Pf2, order_by = bi_status) - 1)
  ) |> 
  mutate(
    # pf_dIth1d = if_else(abs(dIth1d_pct) <= 10, TRUE, FALSE, FALSE),
    # pf_dPf2   = if_else(abs(dPf2_pct)   <= 10, TRUE, FALSE, FALSE),
    
    pf_dIth1d = case_when(
      bi_status == "post" ~ if_else(abs(dIth1d_pct) <= 10, TRUE, FALSE, FALSE),
      .default = NA
    ),
    
    pf_dPf2 = case_when(
      bi_status == "post" ~ if_else(abs(dPf2_pct)   <= 10, TRUE, FALSE, FALSE),
      .default = NA
    ),
    
    pf_burn   = if_all(pf_dIth1d:pf_dPf2),
    # pf_final = pf_specs & pf_burn
    
    # pf_final = if_all(c(pf_specs, pf_burn))
    
    pf_final = case_when(
      bi_status == "post" ~ pf_specs & pf_burn,
      .default = NA
    )
  )

```

```{r}
#| label: pf-judgement-oe

# # TODO: somehow add a column saying if that OE passed as a whole
# df_summary = df_summary |> 
#   group_by(fc_id)



```

```{r}
#| label: output-summary-data

df_summary |> 
  mutate(across(where(is.numeric), \(x) round(x, 3))) |> 
  data.table::fwrite(file = here("data/output", str_glue("{work_order} summary data.csv")))

message("Created output summary data csv file!!!")

```

```{r}
#| label: summary-stats

# TODO: add spectral data, but it needs to come from post burn in testing. no pre burn in data taken

df_stats_liv = df_summary |> 
  filter(bi_status == "pre") |> 
  select(Ith1d, Pf2, Vf2, KINK) |> 
  mutate(
    KINK = abs(KINK),
    # KINK = if_else(KINK>10000, 10000, KINK)
  ) |>
  pivot_longer(
    cols = everything()
  ) |> 
  summarize(
    .by = name,
    `NA` = sum(is.na(value), na.rm = TRUE),
    outliers = sum(!isnt_outlier_tukey(value, na.rm = TRUE), na.rm = TRUE),
    mean = mean(value, na.rm = TRUE),
    sd = sd(value, na.rm = TRUE),
    quant = as_tibble_row(quantile(value, na.rm = TRUE))
  ) |> 
  unpack(quant) |> 
  rename_with(\(x) paste0("p", str_remove(x, "%")), contains("%"))

```

# Summary

## Summary Stats

```{r}
#| label: table-stats

df_stats_liv |> 
  gt(rowname_col = "name") |> 
  tab_header(
    title = "Summary Statistics",
    subtitle = paste0("N = ", df_liv$dut_id |> unique() |> length(), " devices")
  ) |> 
  tab_stubhead(label = "Parameter") |> 
  fmt_number(
    decimals = 0
  ) |> 
  text_replace(
    pattern = "Ith1d", replacement = "Threshold Current (mA)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "Pf3_cal", replacement = "Output Power (mW)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "Vf3", replacement = "Forward Voltage, (V)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "SMSR3", replacement = "Side Mode Suppression Ratio (dB)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "Lp3_cal", replacement = "Peak Wavelength (nm)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "KINK", replacement = "Kink Deviation (%)", locations = cells_stub()
  ) |> 
  fmt_number(
    rows = everything(),
    columns = everything(),
    sep_mark = "",
    decimals = 0
  ) |> 
  fmt_number(
    rows = 3,
    columns = -c(1:3),
    sep_mark = ""
  )

```

## Pass/Fail

```{r}
#| label: pf-tile

facts = c("Vf_lo", "Vf_hi", "Ith", "Pf", "KINK", "SMSR", "specs",
          "dIth1d", "dPf2")

df_summary |> 
  filter(bi_status == "pre") |> 
  select(fc_id, ch, dut_id, starts_with("pf_")) |> 
  pivot_longer(
    cols = starts_with("pf_"),
    names_prefix = "pf_"
  ) |> 
  mutate(name = fct_relevel(name, facts)) |> 
  ggplot(aes(x = ch, y = fc_id, fill = value)) +
  geom_tile(color = "black", show.legend = FALSE) +
  scale_y_discrete(limits = rev) +
  scale_fill_manual(values = c("TRUE" = "green", "FALSE" = "red")) +
  facet_wrap(~ name, nrow = 1) +
  labs(
    title = str_glue("{work_order} pre burn-in parametric summary")
  ) +
  theme(
    axis.title = element_blank(),
    axis.text = element_text(size = 8),
    axis.text.x = element_text(angle = 0)
  )

```

# Characteristic Plots

## Sweep Data

:::{.panel-tabset}

### LI curves

```{r}
#| label: li-curves
#| fig-width: 8
#| fig-height: 8

df_liv |> 
  group_by(dut_id) |> 
  filter(test_id == max(test_id)) |> 
  ungroup() |> 
  filter(bi_status == "pre") |> 
  ggplot(aes(x = current/1e-3, y = power/1e-3, color = ch)) +
  geom_path() +
  geom_hline(yintercept = 80) +
  coord_cartesian(ylim = c(0, 120)) +
  scale_y_continuous(breaks = seq(0, 200, 20)) +
  facet_wrap(~ fc_id) +
  labs(
    title = str_glue("{work_order} LI curves, 50C"),
    x = "Current (mA)",
    y = "Power (mW)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1)),
    axis.text.x = element_text(angle = -90)
  )

```

### VI curves

```{r}
#| label: vi-curves
#| fig-width: 8
#| fig-height: 8

df_liv |> 
  group_by(dut_id) |> 
  filter(test_id == max(test_id)) |> 
  ungroup() |> 
  filter(bi_status == "pre") |> 
  ggplot(aes(x = current/1e-3, y = voltage, color = ch)) +
  geom_path() +
  coord_cartesian(ylim = c(0, 2)) +
  scale_y_continuous(breaks = seq(0, 3, 0.4)) +
  facet_wrap(~ fc_id) +
  labs(
    title = str_glue("{work_order} VI curves, 50C"),
    x = "Current (mA)",
    y = "Voltage (V)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1)),
    axis.text.x = element_text(angle = -90)
  )

```

### MPD IV curves

```{r}
#| label: mpd-iv-curves
#| fig-width: 8
#| fig-height: 8

df_mpd_iv |> 
  ggplot(aes(x = voltage, y = log10(abs(current)), color = ch)) +
  geom_line() +
  coord_cartesian(ylim = c(-12, -2)) +
  scale_y_continuous(breaks = seq(-12, 0, 3)) +
  facet_wrap( ~ fc_id) +
  labs(
    title = str_glue("{work_order} MPD IV curves, 50C"),
    x = "Voltage (V)",
    y = "Log10 Current (A)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1))
  )

```

### Spectra

```{r}
#| label: spectra
#| fig-width: 8
#| fig-height: 8

df_osa |> 
  filter(If == 400e-3,
         wavelength |> between(1565, 1585)) |> 
  ggplot(aes(x = wavelength, y = power, color = ch)) +
  geom_path() +
  coord_cartesian(ylim = c(-80, 20)) +
  facet_wrap(~ fc_id) +
  labs(
    title = str_glue("{work_order} Spectra, 400mA, 50C"),
    x = "Wavelength (nm)",
    y = "Power (dBm)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1))
  )

```


### Peak WL

```{r}
#| label: peak-wl
#| fig-width: 8
#| fig-height: 8

df_summary_osa |> 
  ggplot(aes(x = If/1e-3, y = Lp, color = ch)) +
  geom_line() +
  geom_point() +
  facet_wrap(~ fc_id) +
  labs(
    title = str_glue("{work_order} Peak WL, 50C"),
    x = "Current (mA)",
    y = "Lp (nm)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1)),
    axis.text.x = element_text(angle = -90)
  )

```

### SMSR

```{r}
#| label: smsr
#| fig-width: 8
#| fig-height: 8

df_summary_osa |> 
  ggplot(aes(x = If/1e-3, y = SMSR, color = ch)) +
  geom_line() +
  geom_point() +
  geom_hline(yintercept = 35) +
  coord_cartesian(ylim = c(0, 70)) +
  scale_y_continuous(breaks = seq(0, 100, 10)) +
  facet_wrap(~ fc_id) +
  labs(
    title = str_glue("{work_order} SMSR, 50C"),
    x = "Current (mA)",
    y = "SMSR (dB)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1)),
    axis.text.x = element_text(angle = -90)
  )

```

:::

## Parametric Data

:::{.panel-tabset}

### Ith

```{r}
#| label: cdf-ith

df_summary_liv |> 
  filter(bi_status == "pre") |> 
  plot_cdf(group_var = ch, value_var = Ith1d) +
  scale_y_continuous(labels = scales::label_percent()) +
  labs(
    title = str_glue("{work_order} Threshold Current CDF, 50C"),
    x = "Ith1d (mA)",
    y = "Cumulative Probability (%)"
  )

```

### Pf400

```{r}
#| label: cdf-pf400

df_summary_liv |> 
  filter(bi_status == "pre") |> 
  plot_cdf(group_var = ch, value_var = Pf2) +
  geom_vline(xintercept = 80) +
  scale_x_continuous(breaks = seq(0, 200, 20)) +
  scale_y_continuous(labels = scales::label_percent()) +
  labs(
    title = str_glue("{work_order} Output Power CDF, 400mA, 50C"),
    x = "Pf400 (mW)",
    y = "Cumulative Probability (%)"
  )

```

### Vf400

```{r}
#| label: cdf-vf400

df_summary_liv |> 
  filter(bi_status == "pre") |> 
  plot_cdf(group_var = ch, value_var = Vf2) +
  geom_vline(xintercept = 2.0) +
  scale_x_continuous(breaks = seq(0, 10, 0.4)) +
  scale_y_continuous(labels = scales::label_percent()) +
  labs(
    title = str_glue("{work_order} Foward Voltage CDF, 400mA, 50C"),
    x = "Vf400 (V)",
    y = "Cumulative Probability (%)"
  )

```

### Kink

```{r}
#| label: cdf-kink

df_summary_liv |> 
  filter(bi_status == "pre") |> 
  mutate(KINK = abs(KINK)) |> 
  plot_cdf(group_var = ch, value_var = KINK) +
  geom_vline(xintercept = c(30)) +
  coord_cartesian(xlim = c(0, NA)) +
  scale_x_continuous(breaks = seq(-1e3, 1e3, 20)) +
  scale_y_continuous(labels = scales::label_percent()) +
  labs(
    title = str_glue("{work_order} Kink Deviation CDF, 250-495mA, 50C"),
    x = "|Kink| (%)",
    y = "Cumulative Probability (%)"
  )

```

### SMSR

```{r}
#| label: cdf-smsr

df_summary_osa |> 
  filter(If == 400e-3) |> 
  plot_cdf(group_var = ch, value_var = SMSR) +
  geom_vline(xintercept = c(35)) +
  coord_cartesian(xlim = c(0, 70)) +
  scale_x_continuous(breaks = seq(0, 100, 10)) +
  scale_y_continuous(labels = scales::label_percent()) +
  labs(
    title = str_glue("{work_order} SMSR CDF, 400mA, 50C"),
    x = "SMSR (dB)",
    y = "Cumulative Probability (%)"
  )

```

:::

# Burn In

:::{.panel-tabset}

## LI curves

```{r}
#| label: li-curves-burn
#| fig-width: 8
#| fig-height: 8

df_liv |> 
  group_by(dut_id, bi_status) |> 
  filter(test_id == max(test_id)) |> 
  ungroup() |> 
  ggplot(aes(x = current/1e-3, y = power/1e-3, color = bi_status)) +
  geom_path() +
  coord_cartesian(ylim = c(0, 120)) +
  scale_y_continuous(breaks = seq(0, 200, 20)) +
  facet_wrap(~ dut_id) +
  labs(
    title = str_glue("{work_order} burn in LI curves, 50C"),
    x = "Current (mA)",
    y = "Power (mW)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1), size = 6),
    axis.text.x = element_text(angle = -90),
    axis.text = element_text(size = 6)
  )

```

## LI curves zoom

```{r}
#| label: li-curves-burn-zoom
#| fig-width: 8
#| fig-height: 8

df_liv |> 
  group_by(dut_id, bi_status) |> 
  filter(test_id == max(test_id)) |> 
  ungroup() |> 
  ggplot(aes(x = current/1e-3, y = power/1e-3, color = bi_status)) +
  geom_path() +
  coord_cartesian(xlim = c(8, 30), ylim = c(0, 6)) +
  # scale_y_continuous(breaks = seq(0, 200, 20)) +
  facet_wrap(~ dut_id) +
  labs(
    title = str_glue("{work_order} burn in LI curves zoom, 50C"),
    x = "Current (mA)",
    y = "Power (mW)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1), size = 6),
    axis.text.x = element_text(angle = -90),
    axis.text = element_text(size = 6)
  )

```

## VI curves

```{r}
#| label: vi-curves-burn
#| fig-width: 8
#| fig-height: 8

df_liv |> 
  group_by(dut_id, bi_status) |> 
  filter(test_id == max(test_id)) |> 
  ungroup() |> 
  ggplot(aes(x = current/1e-3, y = voltage, color = bi_status)) +
  geom_path() +
  coord_cartesian(ylim = c(0, 4)) +
  # scale_y_continuous(breaks = seq(0, 10, 0.5)) +
  facet_wrap(~ dut_id) +
  labs(
    title = str_glue("{work_order} burn in VI curves, 50C"),
    x = "Current (mA)",
    y = "Voltage (V)"
  ) +
  theme(
    strip.text = element_text(margin = margin(1,1,1,1), size = 6),
    axis.text.x = element_text(angle = -90),
    axis.text = element_text(size = 6)
  )

```

## Pass/Fail

```{r}
#| label: tile-pf-post-bi
#| fig-width: 8
#| fig-height: 8


# df_summary |> 
#   filter(bi_status == "post") |> 
#   select(fc_id, ch, pf_dIth1d, pf_dPf2) |> 
#   pivot_wider(
#     names_from = ch,
#     values_from = c(pf_dIth1d, pf_dPf2)
#   )

facts = c("Vf_lo", "Vf_hi", "Ith", "Pf", "KINK", "SMSR", "specs",
          "dIth1d", "dPf2", "burn", "final")


# df_summary |> 
#   select(fc_id, ch, dut_id, starts_with("pf_")) |> 
#   pivot_longer(
#     cols = starts_with("pf_"),
#     names_prefix = "pf_"
#   ) |> 
#   mutate(name = fct_relevel(name, facts)) |> 
#   ggplot(aes(x = name, y = ch, fill = value)) +
#   geom_tile(color = "black") +
#   scale_y_discrete(limits = rev) +
#   scale_fill_manual(values = c("TRUE" = "green", "FALSE" = "red")) +
#   facet_wrap(~ fc_id) +
#   theme(
#     axis.title = element_blank(),
#     axis.text.y = element_text(size = 6),
#     axis.text.x = element_text(angle = -90)
#   )

df_summary |> 
  filter(bi_status == "post") |> 
  select(fc_id, ch, dut_id, starts_with("pf_")) |> 
  pivot_longer(
    cols = starts_with("pf_"),
    names_prefix = "pf_"
  ) |> 
  mutate(name = fct_relevel(name, facts)) |> 
  ggplot(aes(x = ch, y = fc_id, fill = value)) +
  geom_tile(color = "black", show.legend = FALSE) +
  scale_y_discrete(limits = rev) +
  scale_fill_manual(values = c("TRUE" = "green", "FALSE" = "red")) +
  facet_wrap(~ name, nrow = 1) +
  labs(
    title = str_glue("{work_order} post burn in parametric summary")
  ) +
  theme(
    axis.title = element_blank(),
    axis.text = element_text(size = 8),
    axis.text.x = element_text(angle = 0)
  )

```

:::
